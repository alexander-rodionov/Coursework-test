networks:
  my_network:

services:
  ubuntu-poco:
    image: ubuntu-poco
    build: 
      context: .
      dockerfile: Dockerfile_poco
    command: /bin/true

  mariadb-1:
    image: mariadb_server
    build:
      context: ./mariadb
      dockerfile: Dockerfile
    container_name: db_server_1
    restart: always
    ports:
      - "9010:3306"
    networks:
      - my_network
    environment:
      MYSQL_DATABASE: db
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: root
    healthcheck:
      test: "/usr/bin/mariadb --user=user --password=password --execute \"SHOW DATABASES;\""
      interval: 5s
      timeout: 5s
      retries: 20

  mariadb-2:
    image: mariadb_server
    build:
      context: ./mariadb
      dockerfile: Dockerfile
    container_name: db_server_2
    restart: always
    ports:
      - "9011:3306"
    networks:
      - my_network
    environment:
      MYSQL_DATABASE: db
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: root
    healthcheck:
      test: "/usr/bin/mariadb --user=user --password=password --execute \"SHOW DATABASES;\""
      interval: 5s
      timeout: 5s
      retries: 20

  mariadb-3:
    image: mariadb_server
    build:
      context: ./mariadb
      dockerfile: Dockerfile
    container_name: db_server_3
    restart: always
    ports:
      - "9012:3306"
    networks:
      - my_network
    environment:
      MYSQL_DATABASE: db
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: root
    healthcheck:
      test: "/usr/bin/mariadb --user=user --password=password --execute \"SHOW DATABASES;\""
      interval: 5s
      timeout: 5s
      retries: 20

  proxysql:
    image: proxysql
    build:
      context: ./proxysql
      dockerfile: Dockerfile
    container_name: proxysql
#    command: >
#      --initial
#    volumes:
#      - proxysql-data:/var/lib/proxysql
    healthcheck:
      test: "/usr/bin/mysql -h proxysql -P 6033 -u user -ppassword --execute \"SHOW DATABASES;\""
      interval: 5s
      timeout: 5s
      retries: 20
    networks:
      - my_network
    ports:
      # Mysql Client Port
      - "9020:6033"
      # Mysql Admin Port
      - "9021:6032"
    depends_on:
      - mariadb-1
      - mariadb-2
      - mariadb-3

  python_loader:
    image: py
    build:
      context: ./test 
      dockerfile: Dockerfile
    container_name: python_loader
    command: "populate_db.py"
    networks:
      - my_network
    restart: "no"
    depends_on:
      proxysql:
        condition: service_healthy

  chat:
    image: chat
    container_name: chat_service
    restart: always
    build:
      context: ./chat
      dockerfile: Dockerfile
    environment:
      DB_HOST: proxysql
      DB_PORT: 6033
      DB_LOGIN: user
      DB_PASSWORD: password
      DB_DATABASE: db
    depends_on: 
      python_loader:
        condition: service_completed_successfully
    ports:
      - "9001:8080"
    networks:
      - my_network
#    links:
#      - proxysql:database_server

  wall:
    image: wall
    container_name: wall_service
    restart: always
    build:
      context: ./wall
      dockerfile: Dockerfile
    environment:
      DB_HOST: proxysql
      DB_PORT: 6033
      DB_LOGIN: user
      DB_PASSWORD: password
      DB_DATABASE: db
    depends_on: 
      python_loader:
        condition: service_completed_successfully
    networks:
      - my_network
    ports:
      - "9002:8080"
#    links:
#      - proxysql:database_server

  user:
    image: user
    container_name: user_service
    restart: always
    build:
      context: ./user
      dockerfile: Dockerfile
    environment:
      DB_HOST: proxysql
      DB_PORT: 6033
      DB_LOGIN: user
      DB_PASSWORD: password
      DB_DATABASE: db
    depends_on: 
      python_loader:
        condition: service_completed_successfully
    networks:
      - my_network
    ports:
      - "9003:8080"
#    links:
#      - proxysql:database_server

  test:
    image: py
    build:
      context: ./test 
      dockerfile: Dockerfile
    container_name: python_loader
    command: "test.py"
    networks:
      - my_network
    restart: "no"
    depends_on:
      user:
        condition: service_healthy